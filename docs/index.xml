<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Dan&#39;s Software Engineering Handbook</title>
    <link>http://danssoftwareengineeringhandbook.com/</link>
    <description>Recent content in Home on Dan&#39;s Software Engineering Handbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Jun 2021 08:10:15 -0700</lastBuildDate><atom:link href="http://danssoftwareengineeringhandbook.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weakly Typed</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/weakly-typed/</link>
      <pubDate>Wed, 23 Jun 2021 21:38:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/weakly-typed/</guid>
      <description>Method of type enforcement at a language level. Specifically, weakly typed languages have few or no restrictions when performing operations on values of different types.
This does not mean results of operations with mixed types are rational, expected, or reasonable. Often, this flexibility is actually the source of pernicious and difficult to debug issues.
Compare to strongly typed languages.</description>
    </item>
    
    <item>
      <title>Strongly Typed</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/strongly-typed/</link>
      <pubDate>Wed, 23 Jun 2021 21:38:00 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/strongly-typed/</guid>
      <description>Method of type enforcement at a language level. Strongly typed languages have restrictions when performing operations on values of different types.
Comparisons and math operations specifically may result in exceptions when unexpected types are mixed.
Compare to weakly typed languages.</description>
    </item>
    
    <item>
      <title>Function</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/function/</link>
      <pubDate>Wed, 23 Jun 2021 16:19:05 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/function/</guid>
      <description>A series of instructions that are grouped and callable by a name. The primary components of a function are its:
 name parameter(s) return value  These three things together are called a function&amp;rsquo;s signature.
Example    Below is an example Javascript function that adds two numbers:
1 2 3  function addValues(a, b) { return a + b; }   Here is an example Kotlin function that finds the smallest value in a list:</description>
    </item>
    
    <item>
      <title>Version Control System (VCS)</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/version-control-system/</link>
      <pubDate>Tue, 22 Jun 2021 20:39:29 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/version-control-system/</guid>
      <description>Development tool. Used to track code changes. Modern and less-modern examples include:
 git mercurial subversion  </description>
    </item>
    
    <item>
      <title>Virtual Machine</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/virtual-machine/</link>
      <pubDate>Tue, 22 Jun 2021 20:38:51 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/virtual-machine/</guid>
      <description>A set of system components, providing an isolated OS environment (a &amp;ldquo;guest OS&amp;rdquo;) on top of the host OS environment.</description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/unit-test/</link>
      <pubDate>Tue, 22 Jun 2021 20:38:19 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/unit-test/</guid>
      <description>A test that exercises the smallest unit of publicly exposed code.
&amp;ldquo;Smallest unit of publicly exposed code&amp;rdquo; depends on a few factors. For a library, this could be a public method in the library. For a REST API, the unit in question is (or at least should be) a REST call.
Why Not Lower Level Testing?    The reason why testing does not occur below this level (the &amp;ldquo;unit&amp;rdquo;), is because of subtle issues that cascade problems later on.</description>
    </item>
    
    <item>
      <title>Type</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/type/</link>
      <pubDate>Tue, 22 Jun 2021 20:38:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/type/</guid>
      <description>Regarding the nature of values in computer languages.
Types are a large subcategory of computer science, which are hard to summarize succinctly.
How a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.</description>
    </item>
    
    <item>
      <title>Turing Complete</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/turing-complete/</link>
      <pubDate>Tue, 22 Jun 2021 20:37:49 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/turing-complete/</guid>
      <description>Criteria for a logic system. Any logic system that includes the functionality for conditionals and loops is considered Turing complete. Most (but not all) programming languages are TC.</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/test-driven-development/</link>
      <pubDate>Tue, 22 Jun 2021 20:37:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/test-driven-development/</guid>
      <description>Software development methodology. Outlines a series of practices during software development that aim to focus the process and improve overall quality of the code. Behaviors consist primarily of:
 Write a test before writing any code Observe the test fail Implement the minimum changes to allow the test to pass Observe the test passing Refactor to improve the existing code Repeat  </description>
    </item>
    
    <item>
      <title>Terminal</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/terminal/</link>
      <pubDate>Tue, 22 Jun 2021 20:37:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/terminal/</guid>
      <description>Software. A program, allows interacting with a computer via the command line interface (CLI).</description>
    </item>
    
    <item>
      <title>Stream</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/stream/</link>
      <pubDate>Tue, 22 Jun 2021 20:36:47 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/stream/</guid>
      <description>A flow of data from a source to one or more destinations.</description>
    </item>
    
    <item>
      <title>Strategy Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/strategy-design-pattern/</link>
      <pubDate>Tue, 22 Jun 2021 20:36:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/strategy-design-pattern/</guid>
      <description>Instead of implementing a single algorithm directly, a strategy design pattern allows for multiple algorithms. The strategy pattern then selects the appropriate algorithm at runtime.</description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/solid/</link>
      <pubDate>Tue, 22 Jun 2021 20:35:41 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/solid/</guid>
      <description> Programming design principles. Acronym. Stands for:   Single Responsibility Principle [entry] Open/Closed Principle [entry] Liskov Substitution Principle [entry] Interface Segregation Principle [entry] Dependency Inversion [entry]  </description>
    </item>
    
    <item>
      <title>Singleton Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/singleton-design-pattern/</link>
      <pubDate>Tue, 22 Jun 2021 20:35:00 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/singleton-design-pattern/</guid>
      <description>Software component that allows for creating a single instance of an object. Subsequent requests return the same object.</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/single-responsibility-principle/</link>
      <pubDate>Tue, 22 Jun 2021 20:34:32 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/single-responsibility-principle/</guid>
      <description>A logical section of code (function, class, module), should only ever have one reason to change.</description>
    </item>
    
    <item>
      <title>Sanity Check</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/sanity-check/</link>
      <pubDate>Tue, 22 Jun 2021 20:33:59 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/sanity-check/</guid>
      <description>Concept. Perform a check on a system. The result should immediately and unambiguously show whether the system is operating under rational expectations. A negative result would indicate the system under test is experiencing logic bugs, which make the system unusable.</description>
    </item>
    
    <item>
      <title>Regression</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/regression/</link>
      <pubDate>Tue, 22 Jun 2021 20:33:32 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/regression/</guid>
      <description>A code change that breaks a previously working feature.</description>
    </item>
    
    <item>
      <title>Open Source</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/open-source/</link>
      <pubDate>Tue, 22 Jun 2021 20:33:13 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/open-source/</guid>
      <description>Software licensing scheme. While each license has its own terms, the primary defining characteristic of open source licensing is that the software is free to use and inspect. Many license types exist. Well known examples include GPL, MIT, BSD.</description>
    </item>
    
    <item>
      <title>Open/Closed Principle</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/open-closed-principle/</link>
      <pubDate>Tue, 22 Jun 2021 20:32:42 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/open-closed-principle/</guid>
      <description>The concept states that classes should be open for extension but closed for modification.</description>
    </item>
    
    <item>
      <title>Observer Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/observer-design-pattern/</link>
      <pubDate>Tue, 22 Jun 2021 20:31:30 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/observer-design-pattern/</guid>
      <description>Attempts to remove a hard coupling between software components. Instead of calling a function directly, which creates a hard coupling between the calling function and the callee, the pattern calls for a mediator to dispatch updates between components. Using the mediator, the calling function and the callee can avoid knowing anything about each other.</description>
    </item>
    
    <item>
      <title>Multiton Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/multiton-design-pattern/</link>
      <pubDate>Tue, 22 Jun 2021 20:30:55 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/multiton-design-pattern/</guid>
      <description>A class, module, or function that is used to handle creating or returning objects. Multitons can take parameters, and invocation is idempotent.
Example:
multiton = (a) =&amp;gt; { if (a == 1) { return Class1() } if (a == 2) { return Class2() } return Class3() } multiton(1) // Class1 multiton(2) // Class2 multiton(3) // Class3 </description>
    </item>
    
    <item>
      <title>Method</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/method/</link>
      <pubDate>Tue, 22 Jun 2021 20:30:16 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/method/</guid>
      <description>A function that has been bound to a class instance. Example:
Calling a function:
myFunction() // function Calling a method:
class MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction() </description>
    </item>
    
    <item>
      <title>Liskov Substitution Principle</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/liskov-substitution-principle/</link>
      <pubDate>Tue, 22 Jun 2021 20:29:10 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/liskov-substitution-principle/</guid>
      <description>SOLID design principle. Relating to types. States essentially that if X is a subtype of Y, then X may be used in substitution of Y without concern for correctness or task performed.</description>
    </item>
    
    <item>
      <title>Library</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/library/</link>
      <pubDate>Tue, 22 Jun 2021 20:28:40 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/library/</guid>
      <description>  Concept. Someone else&amp;rsquo;s code.
  Code that is packaged and maintained externally to the code under development.
  </description>
    </item>
    
    <item>
      <title>Interface Segregation Principle</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/interface-segregation-principle/</link>
      <pubDate>Tue, 22 Jun 2021 20:28:05 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/interface-segregation-principle/</guid>
      <description>States that interfaces should remain small and focused. Interface implementations are then lightweight, and easy to create and maintain. Code that depends on interfaces that are small and focused in turn keep a smaller scope of responsibility.</description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/integration-test/</link>
      <pubDate>Tue, 22 Jun 2021 20:27:18 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/integration-test/</guid>
      <description>Test that encompasses more components than a unit test.
There is no hard definition for what makes a unit test versus an integration test. However, one of the primary goals of an integration test is to test how the different components or services interact with each other.</description>
    </item>
    
    <item>
      <title>Infrastructure as Code (IaC)</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/infrastructure-as-code/</link>
      <pubDate>Tue, 22 Jun 2021 20:26:22 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/infrastructure-as-code/</guid>
      <description>The idea is that all infrastructure (web servers, databases, ingresses, message queues, etc) for a given environment are scripted. Setup and teardown is automated and repeatable. Some examples of software used to automate infrastructure are: Terraform, Ansible, Salt to name just a few.</description>
    </item>
    
    <item>
      <title>IDE</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/ide/</link>
      <pubDate>Mon, 21 Jun 2021 08:07:57 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/ide/</guid>
      <description>Acronym: integrated development environment.
A tool, used by programmers. Includes a combination of tools such as a text editor and language compiler (hence &amp;ldquo;integrated&amp;rdquo;). Often highly extensible and customizable.</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/functional-programming/</link>
      <pubDate>Mon, 21 Jun 2021 08:07:35 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/functional-programming/</guid>
      <description>Programs are designed using a composition of functions, which operate on data.</description>
    </item>
    
    <item>
      <title>Factory Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/factory-design-pattern/</link>
      <pubDate>Mon, 21 Jun 2021 08:07:13 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/factory-design-pattern/</guid>
      <description>A function or class, whose primary responsibility is creating instances of another class.</description>
    </item>
    
    <item>
      <title>Facade Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/facade-design-pattern/</link>
      <pubDate>Mon, 21 Jun 2021 08:05:26 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/facade-design-pattern/</guid>
      <description>An interface or class used to hide a system&amp;rsquo;s underlying complexity.</description>
    </item>
    
    <item>
      <title>Dynamic Language</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/dynamic-language/</link>
      <pubDate>Mon, 21 Jun 2021 08:05:01 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/dynamic-language/</guid>
      <description> Type of programming language. Contrast to a compiled language. Dynamic languages are identified by the fact that the code instructions are interpreted at runtime. The interpreter is a layer of software that runs in between a machine and the code instructions. Because of this additional layer, dynamic languages tend to be slower than compiled ones.  </description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/devops/</link>
      <pubDate>Mon, 21 Jun 2021 08:04:28 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/devops/</guid>
      <description>Traditionally, &amp;ldquo;development&amp;rdquo; and &amp;ldquo;operations&amp;rdquo; have had largely separate responsibilities in technology organizations. However, the trend of DevOps is to combine these professions.
One flaw identified by the separation of these responsibilities is that barriers tend to rise, slowing all efforts. The benefit from combining these job responsibilities is that they are essentially two sides to the same issue, and in that sense, the separation was a bad idea in the first place.</description>
    </item>
    
    <item>
      <title>Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/design-pattern/</link>
      <pubDate>Mon, 21 Jun 2021 08:03:34 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/design-pattern/</guid>
      <description>  A commonly-agreed upon solution to problem that has arisen before.
  Classifying code design challenges in ways that existing ideas can be implemented in order to solve.
  </description>
    </item>
    
    <item>
      <title>Dependency Inversion</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/dependency-inversion/</link>
      <pubDate>Mon, 21 Jun 2021 08:02:22 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/dependency-inversion/</guid>
      <description> SOLID design principle. States that classes should be provided dependencies. This is compared to a system where class methods call external or global dependencies directly.  </description>
    </item>
    
    <item>
      <title>Dependency</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/dependency/</link>
      <pubDate>Mon, 21 Jun 2021 08:01:58 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/dependency/</guid>
      <description>  Concept. A function, class, library, module, or other logical section of code, which is external to the code under active development.
  Concept. A service or third party API, which your code depends on to work correctly.
  </description>
    </item>
    
    <item>
      <title>Continuous Delivery</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/continuous-delivery/</link>
      <pubDate>Mon, 21 Jun 2021 08:01:33 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/continuous-delivery/</guid>
      <description>  Concept. Developer workflow automation. The essential feature of continuous delivery is that every commit that passes its integration step, automatically gets deployed further to a target environment.
Typically, a target environment is a test or integration environment, before final deployment out to production.
  </description>
    </item>
    
    <item>
      <title>Continuous Integration</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/continuous-integration/</link>
      <pubDate>Mon, 21 Jun 2021 08:01:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/continuous-integration/</guid>
      <description>Concept. Developer workflow, involves running a suite of tests against all commits that are pushed to version control. The primary benefit here is in using tests to catch regressions as early as possible.</description>
    </item>
    
    <item>
      <title>Container</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/container/</link>
      <pubDate>Mon, 21 Jun 2021 08:00:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/container/</guid>
      <description>  Definition. A lightweight runtime environment. Encapsulates dependencies from host environment.
  Definition. A filesystem and a process.
  Article. Containers 101.
  </description>
    </item>
    
    <item>
      <title>Compiled Language</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/compiled-language/</link>
      <pubDate>Mon, 21 Jun 2021 07:59:30 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/compiled-language/</guid>
      <description>Type of programming language. Contrast to a dynamic language. Compiled languages are identified by the fact that the target for code instructions is a compiler and not an interpreter.
The primary difference between a compiler and an interpreter is that a compiler produces machine-readable code directly.</description>
    </item>
    
    <item>
      <title>CI/CD</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/ci-cd/</link>
      <pubDate>Mon, 21 Jun 2021 07:32:56 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/ci-cd/</guid>
      <description>Acronym. Continuous integration / continuous delivery.
  Concept. Defines a developer workflow whereby code changes go through an automated process after check in.
The first step of the process is integration. Automated tests run, as well as any configured analysis tools.
The second step is delivery. In this case, delivery means automatic deployment of code changes to the next target environment once the integration step completes. Typically, there is more than one target environment, so this process can loop a few times as verification checks happen in each environment.</description>
    </item>
    
    <item>
      <title>Cloud</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/cloud/</link>
      <pubDate>Mon, 21 Jun 2021 07:31:16 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/cloud/</guid>
      <description>  Someone else&amp;rsquo;s computer.
  Platform. Virtualized services, used to build products and services on top of.
  </description>
    </item>
    
    <item>
      <title>Object Oriented Programming</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/object-oriented-programming/</link>
      <pubDate>Sun, 20 Jun 2021 21:40:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/object-oriented-programming/</guid>
      <description>Language-level support for binding data to methods.</description>
    </item>
    
    <item>
      <title>Class</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/class/</link>
      <pubDate>Sun, 20 Jun 2021 21:37:46 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/class/</guid>
      <description>Related to object-oriented programming. A class is a language construct that allows binding data to methods.</description>
    </item>
    
    <item>
      <title>Builder Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/builder-design-pattern/</link>
      <pubDate>Sun, 20 Jun 2021 21:35:44 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/builder-design-pattern/</guid>
      <description> Definition. A class, module, or other language construct for specifying how to configure and build an object before the actual object instantiation.  </description>
    </item>
    
    <item>
      <title>Bug</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/bug/</link>
      <pubDate>Sun, 20 Jun 2021 21:34:55 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/bug/</guid>
      <description>Loosely defined as a problem in code, which could be any of the following:
 A logic flaw A syntax or runtime error A memory leak A race condition A previously overlooked flaw  </description>
    </item>
    
    <item>
      <title>Big O Notation</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/big-o-notation/</link>
      <pubDate>Sun, 20 Jun 2021 21:33:05 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/big-o-notation/</guid>
      <description>  Definition. A mathematical notation, Big O is used to classify algorithmic performance in space or time requirements. Big O is used to measure the upper bound of growth, ie, worst case scenario.
  Reference. Wikipedia.
  </description>
    </item>
    
    <item>
      <title>API</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/api/</link>
      <pubDate>Sun, 20 Jun 2021 21:32:12 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/api/</guid>
      <description>  Acronym. Application programming interface.
  Concept. Something that provides functionality, which can be programmed against.
  A library, module, or service that can be integrated into code.
  </description>
    </item>
    
    <item>
      <title>Algorithm</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/algorithm/</link>
      <pubDate>Sun, 20 Jun 2021 21:30:12 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/algorithm/</guid>
      <description>A reusable set of computer instructions in the form of code.</description>
    </item>
    
    <item>
      <title>Adapter Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/adapter-design-pattern/</link>
      <pubDate>Sun, 20 Jun 2021 21:27:14 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/adapter-design-pattern/</guid>
      <description>Attempts to solve questions like, &amp;ldquo;how do we get incompatible interfaces to work together?&amp;rdquo; To solve this problem, a layer is introduced between the interfaces (&amp;ldquo;the adapter&amp;rdquo;), which mediates incompatibilities.</description>
    </item>
    
    <item>
      <title>Abstraction</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/abstraction/</link>
      <pubDate>Sun, 20 Jun 2021 21:24:03 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/abstraction/</guid>
      <description>The idea behind, or purpose of, a software component. Contrast the two example sentences below:
Example 1 (abstraction):
 This writer abstraction is flexible and backend-agnostic.
 Example 2 (implementation):
 This file system writer implementation is flexible, but backend-specific.
 The first example does not mention what kind of writer the speaker is referencing. The second example, by contrast, references a specific implementation (the filesystem writer).</description>
    </item>
    
  </channel>
</rss>
