<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computer science on Dan's Software Engineering Handbook</title><link>http://danssoftwareengineeringhandbook.com/tags/computer-science/</link><description>Recent content in computer science on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Jun 2021 21:23:54 -0700</lastBuildDate><atom:link href="http://danssoftwareengineeringhandbook.com/tags/computer-science/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursion</title><link>http://danssoftwareengineeringhandbook.com/glossary/recursion/</link><pubDate>Wed, 30 Jun 2021 21:23:54 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/recursion/</guid><description>A function that calls itself, typically with a guard condition that prevents infinite execution.
Below is an example of a recursive function in javascript (a common factorial example):
1 2 3 4 5 6 7 8 9 10 const factorial = (n) =&amp;gt; { if (n == 1) { return 1; } return n * factorial(n - 1); }; factorial(4); // == 24</description></item><item><title>Type</title><link>http://danssoftwareengineeringhandbook.com/glossary/type/</link><pubDate>Tue, 22 Jun 2021 20:38:04 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/type/</guid><description>Regarding the nature of values in computer languages.
Types are a large subcategory of computer science, which are hard to summarize succinctly.
How a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.</description></item><item><title>Big O Notation</title><link>http://danssoftwareengineeringhandbook.com/glossary/big-o-notation/</link><pubDate>Sun, 20 Jun 2021 21:33:05 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/big-o-notation/</guid><description>A mathematical notation, Big O is used to classify algorithmic performance in space or time requirements. Big O is used to measure the upper bound of growth, ie, worst case scenario.</description></item><item><title>Algorithm</title><link>http://danssoftwareengineeringhandbook.com/glossary/algorithm/</link><pubDate>Sun, 20 Jun 2021 21:30:12 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/algorithm/</guid><description>A reusable set of computer instructions in the form of code.</description></item></channel></rss>