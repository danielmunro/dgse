<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>functional programming on Dan's Software Engineering Handbook</title><link>http://sehandbook.com/tags/functional-programming/</link><description>Recent content in functional programming on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 Jul 2021 00:55:07 -0700</lastBuildDate><atom:link href="http://sehandbook.com/tags/functional-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Currying</title><link>http://sehandbook.com/glossary/currying/</link><pubDate>Thu, 08 Jul 2021 00:55:07 -0700</pubDate><guid>http://sehandbook.com/glossary/currying/</guid><description>Function currying is a functional design process. A function that takes multiple arguments are refactored into a function that takes a single argument. For example:
1 2 3 4 5 function add(a, b, c) { return a + b + c; } add(1, 2, 3); // equals 6 becomes:
1 2 3 4 5 6 7 function add(a) { return function(b) { return a + b; } } add(add(1)(2))(3) // equals 6</description></item></channel></rss>