<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concept on Dan's Software Engineering Handbook</title><link>http://sehandbook.com/tags/concept/</link><description>Recent content in concept on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Jun 2021 15:55:26 -0700</lastBuildDate><atom:link href="http://sehandbook.com/tags/concept/index.xml" rel="self" type="application/rss+xml"/><item><title>Platform</title><link>http://sehandbook.com/glossary/platform/</link><pubDate>Wed, 07 Jul 2021 05:36:35 -0700</pubDate><guid>http://sehandbook.com/glossary/platform/</guid><description>A collection of services. When combined, these services function to supply an end-to-end solution to a particular problem space. Configurable via API.</description></item><item><title>Observability</title><link>http://sehandbook.com/glossary/observability/</link><pubDate>Mon, 05 Jul 2021 13:03:16 -0700</pubDate><guid>http://sehandbook.com/glossary/observability/</guid><description>Qualities of a platform that lend to its understandability. Such qualities are:
Logging is in place for all services. Specifically, data ingress or egress for all services should emit a log with the canonical ID of the data. Log streams should be collected via a log aggregator. The log aggregator should allow searching across logs at a minimum. Alerting is configurable. The platform is able to provide health and liveness checks.</description></item><item><title>Higher Order Function</title><link>http://sehandbook.com/glossary/higher-order-function/</link><pubDate>Fri, 02 Jul 2021 19:55:31 -0700</pubDate><guid>http://sehandbook.com/glossary/higher-order-function/</guid><description>A function that operates on functions, either by taking one as an argument or by returning one.
React hooks are examples of higher order functions:
1 2 3 4 5 6 7 8 9 useEffect(() =&amp;gt; { const timeout = setTimeout(() =&amp;gt; alert(&amp;#39;Hello!&amp;#39;), 1000); return () =&amp;gt; { clearTimeout(timeout); }; }, []); Other examples include map, reduce, and filter:
1 2 3 4 5 collection.map((item) =&amp;gt; .</description></item><item><title>Recursion</title><link>http://sehandbook.com/glossary/recursion/</link><pubDate>Wed, 30 Jun 2021 21:23:54 -0700</pubDate><guid>http://sehandbook.com/glossary/recursion/</guid><description>A function that calls itself, typically with a guard condition that prevents infinite execution.
Below is an example of a recursive function in javascript (a common factorial example):
1 2 3 4 5 6 7 8 9 10 const factorial = (n) =&amp;gt; { if (n == 1) { return 1; } return n * factorial(n - 1); }; factorial(4); // == 24</description></item><item><title>Database</title><link>http://sehandbook.com/glossary/database/</link><pubDate>Fri, 25 Jun 2021 08:01:36 -0700</pubDate><guid>http://sehandbook.com/glossary/database/</guid><description>A program that specializes in efficient data storage and retrieval. There are a large variety of databases, which serve different purposes. Choosing the right database depends on many factors, such as types and formats of information being stored, whether or not the data is structured, and the overall relatability of data.
Some of the most popular database types are:
relational document graph A key differentiator from a file system is that a database deals with structured, related, index-able data.</description></item><item><title>Smell</title><link>http://sehandbook.com/glossary/smell/</link><pubDate>Thu, 24 Jun 2021 07:21:51 -0700</pubDate><guid>http://sehandbook.com/glossary/smell/</guid><description>A smell is a term for an instinct that something is wrong. &amp;ldquo;Something&amp;rdquo; in this sense can refer to at least a few possibilities:
code that is buggy, inconsistent, poorly designed, or error-prone a violation of expectations in a live system a misunderstanding of the model of code execution Code smells are typically issues of quality, but this isn&amp;rsquo;t always the case.</description></item><item><title>Turing Complete</title><link>http://sehandbook.com/glossary/turing-complete/</link><pubDate>Tue, 22 Jun 2021 20:37:49 -0700</pubDate><guid>http://sehandbook.com/glossary/turing-complete/</guid><description>Criteria for a logic system. Any logic system that includes the functionality for conditionals and loops is considered Turing complete. Most (but not all) programming languages are TC.</description></item><item><title>Test Driven Development</title><link>http://sehandbook.com/glossary/test-driven-development/</link><pubDate>Tue, 22 Jun 2021 20:37:24 -0700</pubDate><guid>http://sehandbook.com/glossary/test-driven-development/</guid><description>Software development methodology. Outlines a series of practices during software development that aim to focus the process and improve overall quality of the code. Behaviors consist primarily of:
Write a test before writing any code Observe the test fail Implement the minimum changes to allow the test to pass Observe the test passing Refactor to improve the existing code Repeat</description></item><item><title>Stream</title><link>http://sehandbook.com/glossary/stream/</link><pubDate>Tue, 22 Jun 2021 20:36:47 -0700</pubDate><guid>http://sehandbook.com/glossary/stream/</guid><description>A flow of data from a source to one or more destinations.</description></item><item><title>Sanity Check</title><link>http://sehandbook.com/glossary/sanity-check/</link><pubDate>Tue, 22 Jun 2021 20:33:59 -0700</pubDate><guid>http://sehandbook.com/glossary/sanity-check/</guid><description>Concept. Perform a check on a system. The result should immediately and unambiguously show whether the system is operating under rational expectations. A negative result would indicate the system under test is experiencing logic bugs, which make the system unusable.</description></item><item><title>Open Source</title><link>http://sehandbook.com/glossary/open-source/</link><pubDate>Tue, 22 Jun 2021 20:33:13 -0700</pubDate><guid>http://sehandbook.com/glossary/open-source/</guid><description>Software licensing scheme. While each license has its own terms, the primary defining characteristic of open source licensing is that the software is free to use and inspect. Many license types exist. Well known examples include GPL, MIT, BSD.</description></item><item><title>Library</title><link>http://sehandbook.com/glossary/library/</link><pubDate>Tue, 22 Jun 2021 20:28:40 -0700</pubDate><guid>http://sehandbook.com/glossary/library/</guid><description>Code that is packaged and maintained externally to the code under development. Similar to dependency.</description></item><item><title>Integration Test</title><link>http://sehandbook.com/glossary/integration-test/</link><pubDate>Tue, 22 Jun 2021 20:27:18 -0700</pubDate><guid>http://sehandbook.com/glossary/integration-test/</guid><description>Test that encompasses more components than a unit test.
There is no hard definition for what makes a unit test versus an integration test. However, one of the primary goals of an integration test is to test how the different components or services interact with each other.</description></item><item><title>Infrastructure as Code (IaC)</title><link>http://sehandbook.com/glossary/infrastructure-as-code/</link><pubDate>Tue, 22 Jun 2021 20:26:22 -0700</pubDate><guid>http://sehandbook.com/glossary/infrastructure-as-code/</guid><description>The idea is that all infrastructure (web servers, databases, ingresses, message queues, etc) for a given environment are scripted. Setup and teardown is automated and repeatable. Some examples of software used to automate infrastructure are: Terraform, Ansible, Salt to name just a few.</description></item><item><title>Functional Programming</title><link>http://sehandbook.com/glossary/functional-programming/</link><pubDate>Mon, 21 Jun 2021 08:07:35 -0700</pubDate><guid>http://sehandbook.com/glossary/functional-programming/</guid><description>Programs are designed using a composition of functions, which operate on data.</description></item><item><title>DevOps</title><link>http://sehandbook.com/glossary/devops/</link><pubDate>Mon, 21 Jun 2021 08:04:28 -0700</pubDate><guid>http://sehandbook.com/glossary/devops/</guid><description>Traditionally, &amp;ldquo;development&amp;rdquo; and &amp;ldquo;operations&amp;rdquo; have had largely separate responsibilities in technology organizations. However, the trend of DevOps is to combine these professions.
One flaw identified by the separation of these responsibilities is that barriers tend to rise, slowing all efforts. The benefit from combining these job responsibilities is that they are essentially two sides to the same issue, and in that sense, the separation was a bad idea in the first place.</description></item><item><title>Design Pattern</title><link>http://sehandbook.com/glossary/design-pattern/</link><pubDate>Mon, 21 Jun 2021 08:03:34 -0700</pubDate><guid>http://sehandbook.com/glossary/design-pattern/</guid><description>A method of identifying reoccurring problems and applying commonly-agreed upon solutions.</description></item><item><title>Dependency</title><link>http://sehandbook.com/glossary/dependency/</link><pubDate>Mon, 21 Jun 2021 08:01:58 -0700</pubDate><guid>http://sehandbook.com/glossary/dependency/</guid><description>A function, class, library, module, api, or other logical section of code, which is external to the code under active development. Typically, but not always, this code is vendored, versioned, packaged, and read-only.</description></item><item><title>Continuous Delivery</title><link>http://sehandbook.com/glossary/continuous-delivery/</link><pubDate>Mon, 21 Jun 2021 08:01:33 -0700</pubDate><guid>http://sehandbook.com/glossary/continuous-delivery/</guid><description>The essential feature of continuous delivery is that every commit that passes its integration step, automatically gets deployed further to a target environment.
Typically, a target environment is a test or integration environment, before final deployment out to production.</description></item><item><title>Continuous Integration</title><link>http://sehandbook.com/glossary/continuous-integration/</link><pubDate>Mon, 21 Jun 2021 08:01:04 -0700</pubDate><guid>http://sehandbook.com/glossary/continuous-integration/</guid><description>A suite of tests run against all commits that are pushed to version control automatically. The primary benefit here is in using tests to catch regressions as early as possible.</description></item><item><title>Cloud</title><link>http://sehandbook.com/glossary/cloud/</link><pubDate>Mon, 21 Jun 2021 07:31:16 -0700</pubDate><guid>http://sehandbook.com/glossary/cloud/</guid><description> Someone else&amp;rsquo;s computer.
Platform. Virtualized services, used to build products and services on top of.</description></item><item><title>API</title><link>http://sehandbook.com/glossary/api/</link><pubDate>Sun, 20 Jun 2021 21:32:12 -0700</pubDate><guid>http://sehandbook.com/glossary/api/</guid><description> Acronym. Application programming interface.
Concept. Something that provides functionality, which can be programmed against.
A library, module, or service that can be integrated into code.</description></item><item><title>Abstraction</title><link>http://sehandbook.com/glossary/abstraction/</link><pubDate>Sun, 20 Jun 2021 21:24:03 -0700</pubDate><guid>http://sehandbook.com/glossary/abstraction/</guid><description>The idea behind, or purpose of, a software component. Contrast the two example sentences below:
Example 1 (abstraction):
This writer abstraction is flexible and backend-agnostic.
Example 2 (implementation):
This file system writer implementation is flexible, but backend-specific.
The first example does not mention what kind of writer the speaker is referencing. The second example, by contrast, references a specific implementation (the filesystem writer).</description></item></channel></rss>