<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concept on Dan&#39;s Software Engineering Handbook</title>
    <link>http://danssoftwareengineeringhandbook.com/tags/concept/</link>
    <description>Recent content in concept on Dan&#39;s Software Engineering Handbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jun 2021 15:55:26 -0700</lastBuildDate><atom:link href="http://danssoftwareengineeringhandbook.com/tags/concept/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unit Test</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/unit-test/</link>
      <pubDate>Tue, 22 Jun 2021 20:38:19 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/unit-test/</guid>
      <description>A test that exercises the smallest unit of publicly exposed code.
&amp;ldquo;Smallest unit of publicly exposed code&amp;rdquo; depends on a few factors. For a library, this could be a public method in the library. For a REST API, the unit in question is (or at least should be) a REST call.
Why Not Lower Level Testing?    The reason why testing does not occur below this level (the &amp;ldquo;unit&amp;rdquo;), is because of subtle issues that cascade problems later on.</description>
    </item>
    
    <item>
      <title>Turing Complete</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/turing-complete/</link>
      <pubDate>Tue, 22 Jun 2021 20:37:49 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/turing-complete/</guid>
      <description>Criteria for a logic system. Any logic system that includes the functionality for conditionals and loops is considered Turing complete. Most (but not all) programming languages are TC.</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/test-driven-development/</link>
      <pubDate>Tue, 22 Jun 2021 20:37:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/test-driven-development/</guid>
      <description>Software development methodology. Outlines a series of practices during software development that aim to focus the process and improve overall quality of the code. Behaviors consist primarily of:
 Write a test before writing any code Observe the test fail Implement the minimum changes to allow the test to pass Observe the test passing Refactor to improve the existing code Repeat  </description>
    </item>
    
    <item>
      <title>Stream</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/stream/</link>
      <pubDate>Tue, 22 Jun 2021 20:36:47 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/stream/</guid>
      <description>A flow of data from a source to one or more destinations.</description>
    </item>
    
    <item>
      <title>Strategy Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/strategy-design-pattern/</link>
      <pubDate>Tue, 22 Jun 2021 20:36:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/strategy-design-pattern/</guid>
      <description>Instead of implementing a single algorithm directly, a strategy design pattern allows for multiple algorithms. The strategy pattern then selects the appropriate algorithm at runtime.</description>
    </item>
    
    <item>
      <title>Sanity Check</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/sanity-check/</link>
      <pubDate>Tue, 22 Jun 2021 20:33:59 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/sanity-check/</guid>
      <description>Concept. Perform a check on a system. The result should immediately and unambiguously show whether the system is operating under rational expectations. A negative result would indicate the system under test is experiencing logic bugs, which make the system unusable.</description>
    </item>
    
    <item>
      <title>Open Source</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/open-source/</link>
      <pubDate>Tue, 22 Jun 2021 20:33:13 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/open-source/</guid>
      <description>Software licensing scheme. While each license has its own terms, the primary defining characteristic of open source licensing is that the software is free to use and inspect. Many license types exist. Well known examples include GPL, MIT, BSD.</description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/integration-test/</link>
      <pubDate>Tue, 22 Jun 2021 20:27:18 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/integration-test/</guid>
      <description>Test that encompasses more components than a unit test.
There is no hard definition for what makes a unit test versus an integration test. However, one of the primary goals of an integration test is to test how the different components or services interact with each other.</description>
    </item>
    
    <item>
      <title>Infrastructure as Code (IaC)</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/infrastructure-as-code/</link>
      <pubDate>Tue, 22 Jun 2021 20:26:22 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/infrastructure-as-code/</guid>
      <description>The idea is that all infrastructure (web servers, databases, ingresses, message queues, etc) for a given environment are scripted. Setup and teardown is automated and repeatable. Some examples of software used to automate infrastructure are: Terraform, Ansible, Salt to name just a few.</description>
    </item>
    
    <item>
      <title>Functional Programming</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/functional-programming/</link>
      <pubDate>Mon, 21 Jun 2021 08:07:35 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/functional-programming/</guid>
      <description>Programs are designed using a composition of functions, which operate on data.</description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/devops/</link>
      <pubDate>Mon, 21 Jun 2021 08:04:28 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/devops/</guid>
      <description>Traditionally, &amp;ldquo;development&amp;rdquo; and &amp;ldquo;operations&amp;rdquo; have had largely separate responsibilities in technology organizations. However, the trend of DevOps is to combine these professions.
One flaw identified by the separation of these responsibilities is that barriers tend to rise, slowing all efforts. The benefit from combining these job responsibilities is that they are essentially two sides to the same issue, and in that sense, the separation was a bad idea in the first place.</description>
    </item>
    
    <item>
      <title>Design Pattern</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/design-pattern/</link>
      <pubDate>Mon, 21 Jun 2021 08:03:34 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/design-pattern/</guid>
      <description>  A commonly-agreed upon solution to problem that has arisen before.
  Classifying code design challenges in ways that existing ideas can be implemented in order to solve.
  </description>
    </item>
    
    <item>
      <title>Cloud</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/cloud/</link>
      <pubDate>Mon, 21 Jun 2021 07:31:16 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/cloud/</guid>
      <description>  Someone else&amp;rsquo;s computer.
  Platform. Virtualized services, used to build products and services on top of.
  </description>
    </item>
    
    <item>
      <title>Object Oriented Programming</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/object-oriented-programming/</link>
      <pubDate>Sun, 20 Jun 2021 21:40:24 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/object-oriented-programming/</guid>
      <description>Language-level support for binding data to methods.</description>
    </item>
    
    <item>
      <title>API</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/api/</link>
      <pubDate>Sun, 20 Jun 2021 21:32:12 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/api/</guid>
      <description>  Acronym. Application programming interface.
  Concept. Something that provides functionality, which can be programmed against.
  A library, module, or service that can be integrated into code.
  </description>
    </item>
    
    <item>
      <title>Abstraction</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/abstraction/</link>
      <pubDate>Sun, 20 Jun 2021 21:24:03 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/abstraction/</guid>
      <description>The idea behind, or purpose of, a software component. Contrast the two example sentences below:
Example 1 (abstraction):
 This writer abstraction is flexible and backend-agnostic.
 Example 2 (implementation):
 This file system writer implementation is flexible, but backend-specific.
 The first example does not mention what kind of writer the speaker is referencing. The second example, by contrast, references a specific implementation (the filesystem writer).</description>
    </item>
    
  </channel>
</rss>
