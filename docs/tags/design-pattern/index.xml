<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design pattern on Dan's Software Engineering Handbook</title><link>http://sehandbook.com/tags/design-pattern/</link><description>Recent content in design pattern on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Jun 2021 20:36:24 -0700</lastBuildDate><atom:link href="http://sehandbook.com/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Strategy Design Pattern</title><link>http://sehandbook.com/glossary/strategy-design-pattern/</link><pubDate>Tue, 22 Jun 2021 20:36:24 -0700</pubDate><guid>http://sehandbook.com/glossary/strategy-design-pattern/</guid><description>Instead of implementing a single algorithm directly, a strategy design pattern allows for multiple algorithms. The strategy pattern then selects the appropriate algorithm at runtime.</description></item><item><title>Singleton Design Pattern</title><link>http://sehandbook.com/glossary/singleton-design-pattern/</link><pubDate>Tue, 22 Jun 2021 20:35:00 -0700</pubDate><guid>http://sehandbook.com/glossary/singleton-design-pattern/</guid><description>Software component that allows for creating a single instance of an object. Subsequent requests return the same object.</description></item><item><title>Observer Design Pattern</title><link>http://sehandbook.com/glossary/observer-design-pattern/</link><pubDate>Tue, 22 Jun 2021 20:31:30 -0700</pubDate><guid>http://sehandbook.com/glossary/observer-design-pattern/</guid><description>Attempts to remove a hard coupling between software components. Instead of calling a function directly, which creates a hard coupling between the calling function and the callee, the pattern calls for a mediator to dispatch updates between components. Using the mediator, the calling function and the callee can avoid knowing anything about each other.</description></item><item><title>Multiton Design Pattern</title><link>http://sehandbook.com/glossary/multiton-design-pattern/</link><pubDate>Tue, 22 Jun 2021 20:30:55 -0700</pubDate><guid>http://sehandbook.com/glossary/multiton-design-pattern/</guid><description>A class, module, or function that is used to handle creating or returning objects. Multitons can take parameters, and invocation is idempotent.
Example:
multiton = (a) =&amp;gt; { if (a == 1) { return Class1() } if (a == 2) { return Class2() } return Class3() } multiton(1) // Class1 multiton(2) // Class2 multiton(3) // Class3</description></item><item><title>Factory Design Pattern</title><link>http://sehandbook.com/glossary/factory-design-pattern/</link><pubDate>Mon, 21 Jun 2021 08:07:13 -0700</pubDate><guid>http://sehandbook.com/glossary/factory-design-pattern/</guid><description>A function or class, whose primary responsibility is creating instances of another class.</description></item><item><title>Facade Design Pattern</title><link>http://sehandbook.com/glossary/facade-design-pattern/</link><pubDate>Mon, 21 Jun 2021 08:05:26 -0700</pubDate><guid>http://sehandbook.com/glossary/facade-design-pattern/</guid><description>An interface or class used to hide a system&amp;rsquo;s underlying complexity.</description></item><item><title>Builder Design Pattern</title><link>http://sehandbook.com/glossary/builder-design-pattern/</link><pubDate>Sun, 20 Jun 2021 21:35:44 -0700</pubDate><guid>http://sehandbook.com/glossary/builder-design-pattern/</guid><description>A class, module, or other language construct for specifying how to configure and build an object before the actual object instantiation.</description></item><item><title>Adapter Design Pattern</title><link>http://sehandbook.com/glossary/adapter-design-pattern/</link><pubDate>Sun, 20 Jun 2021 21:27:14 -0700</pubDate><guid>http://sehandbook.com/glossary/adapter-design-pattern/</guid><description>Attempts to solve questions like, &amp;ldquo;how do we get incompatible interfaces to work together?&amp;rdquo; To solve this problem, a layer is introduced between the interfaces (&amp;ldquo;the adapter&amp;rdquo;), which mediates incompatibilities.</description></item></channel></rss>