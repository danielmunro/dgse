<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language design on Dan's Software Engineering Handbook</title><link>http://danssoftwareengineeringhandbook.com/tags/language-design/</link><description>Recent content in language design on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 05 Jul 2021 10:48:37 -0700</lastBuildDate><atom:link href="http://danssoftwareengineeringhandbook.com/tags/language-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Interpreted Language</title><link>http://danssoftwareengineeringhandbook.com/glossary/interpreted-language/</link><pubDate>Mon, 05 Jul 2021 10:48:37 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/interpreted-language/</guid><description>Type of programming language. Contrast to a compiled language.
Interpreted programming languages are programming languages where code is not compiled. Instead, an interpreter runs the code. The interpreter is a layer of software that runs in between the code written by a software developer and the machine running the code.
Because of this additional layer, interpreted languages tend to be slower than compiled ones, in terms of execution time and memory usage.</description></item><item><title>Weakly Typed</title><link>http://danssoftwareengineeringhandbook.com/glossary/weakly-typed/</link><pubDate>Wed, 23 Jun 2021 21:38:04 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/weakly-typed/</guid><description>Method of type enforcement at a language level. Specifically, weakly typed languages have few or no restrictions when performing operations on values of different types.
This does not mean results of operations with mixed types are rational, expected, or reasonable. Often, this flexibility is actually the source of pernicious and difficult to debug issues.
Compare to strongly typed languages.</description></item><item><title>Strongly Typed</title><link>http://danssoftwareengineeringhandbook.com/glossary/strongly-typed/</link><pubDate>Wed, 23 Jun 2021 21:38:00 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/strongly-typed/</guid><description>Method of type enforcement at a language level. Strongly typed languages have restrictions when performing operations on values of different types.
Comparisons and math operations specifically may result in exceptions when unexpected types are mixed.
Compare to weakly typed languages.</description></item><item><title>Function</title><link>http://danssoftwareengineeringhandbook.com/glossary/function/</link><pubDate>Wed, 23 Jun 2021 16:19:05 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/function/</guid><description>A series of instructions that are grouped and callable by a name. The primary components of a function are its:
name parameter(s) return value These three things together are called a function&amp;rsquo;s signature.
Example Below is an example Javascript function that adds two numbers:
1 2 3 function addValues(a, b) { return a + b; } Here is an example Kotlin function that finds the smallest value in a list:</description></item><item><title>Type</title><link>http://danssoftwareengineeringhandbook.com/glossary/type/</link><pubDate>Tue, 22 Jun 2021 20:38:04 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/type/</guid><description>Regarding the nature of values in computer languages.
Types are a large subcategory of computer science, which are hard to summarize succinctly.
How a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.</description></item><item><title>Method</title><link>http://danssoftwareengineeringhandbook.com/glossary/method/</link><pubDate>Tue, 22 Jun 2021 20:30:16 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/method/</guid><description>A function that has been bound to a class instance. Example:
Calling a function:
myFunction() // function Calling a method:
class MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction()</description></item><item><title>Dynamic Language</title><link>http://danssoftwareengineeringhandbook.com/glossary/dynamic-language/</link><pubDate>Mon, 21 Jun 2021 08:05:01 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/dynamic-language/</guid><description>Feature of a programming language. Operations that are typically compile-time operations are available at run-time. Not a binary description, but rather a spectrum, where some dynamic features may be supported but not others.</description></item><item><title>Compiled Language</title><link>http://danssoftwareengineeringhandbook.com/glossary/compiled-language/</link><pubDate>Mon, 21 Jun 2021 07:59:30 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/compiled-language/</guid><description>Type of programming language. Contrast to a dynamic language.
Compiled languages are identified by the fact that the target for code is a compiler and not an interpreter. What this means, practically, is that at runtime, the program runs as compiled machine code. There is no interpreter layer.</description></item><item><title>Class</title><link>http://danssoftwareengineeringhandbook.com/glossary/class/</link><pubDate>Sun, 20 Jun 2021 21:37:46 -0700</pubDate><guid>http://danssoftwareengineeringhandbook.com/glossary/class/</guid><description>Related to object-oriented programming. A class is a language construct that allows binding data to methods.
Example Below is an example class for a game, written in Kotlin. In this example, QuestService handles responsibilities related to questing. The class initializes with a list of possible quests. Most methods scope to a PlayerMob, meaning those particular methods concern only a single player&amp;rsquo;s quests.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class QuestService(private val quests: List&amp;lt;Quest&amp;gt;) { fun findByType(type: QuestType): Quest?</description></item></channel></rss>