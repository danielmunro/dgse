<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>language construct on Dan's Software Engineering Handbook</title><link>http://sehandbook.com/tags/language-construct/</link><description>Recent content in language construct on Dan's Software Engineering Handbook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Jun 2021 16:19:05 -0700</lastBuildDate><atom:link href="http://sehandbook.com/tags/language-construct/index.xml" rel="self" type="application/rss+xml"/><item><title>Function</title><link>http://sehandbook.com/glossary/function/</link><pubDate>Wed, 23 Jun 2021 16:19:05 -0700</pubDate><guid>http://sehandbook.com/glossary/function/</guid><description>A series of instructions that are grouped and callable by a name. The primary components of a function are its:
name parameter(s) return value These three things together are called a function&amp;rsquo;s signature.
Example Below is an example Javascript function that adds two numbers:
1 2 3 function addValues(a, b) { return a + b; } Here is an example Kotlin function that finds the smallest value in a list:</description></item><item><title>Type</title><link>http://sehandbook.com/glossary/type/</link><pubDate>Tue, 22 Jun 2021 20:38:04 -0700</pubDate><guid>http://sehandbook.com/glossary/type/</guid><description>Regarding the nature of values in computer languages.
Types are a large subcategory of computer science, which are hard to summarize succinctly.
How a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.</description></item><item><title>Method</title><link>http://sehandbook.com/glossary/method/</link><pubDate>Tue, 22 Jun 2021 20:30:16 -0700</pubDate><guid>http://sehandbook.com/glossary/method/</guid><description>A function that has been bound to a class instance. Example:
Calling a function:
myFunction() // function Calling a method:
class MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction()</description></item><item><title>Class</title><link>http://sehandbook.com/glossary/class/</link><pubDate>Sun, 20 Jun 2021 21:37:46 -0700</pubDate><guid>http://sehandbook.com/glossary/class/</guid><description>Related to object-oriented programming. A class is a language construct that allows binding data to methods.
Example Below is an example class for a game, written in Kotlin. In this example, QuestService handles responsibilities related to questing. The class initializes with a list of possible quests. Most methods scope to a PlayerMob, meaning those particular methods concern only a single player&amp;rsquo;s quests.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class QuestService(private val quests: List&amp;lt;Quest&amp;gt;) { fun findByType(type: QuestType): Quest?</description></item></channel></rss>