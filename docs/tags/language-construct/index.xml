<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>language construct on Dan&#39;s Software Engineering Handbook</title>
    <link>http://danssoftwareengineeringhandbook.com/tags/language-construct/</link>
    <description>Recent content in language construct on Dan&#39;s Software Engineering Handbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jun 2021 16:19:05 -0700</lastBuildDate><atom:link href="http://danssoftwareengineeringhandbook.com/tags/language-construct/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Function</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/function/</link>
      <pubDate>Wed, 23 Jun 2021 16:19:05 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/function/</guid>
      <description>A series of instructions that are grouped and callable by a name. The primary components of a function are its:
 name parameter(s) return value  These three things together are called a function&amp;rsquo;s signature.
Example    Below is an example Javascript function that adds two numbers:
1 2 3  function addValues(a, b) { return a + b; }   Here is an example Kotlin function that finds the smallest value in a list:</description>
    </item>
    
    <item>
      <title>Type</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/type/</link>
      <pubDate>Tue, 22 Jun 2021 20:38:04 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/type/</guid>
      <description>Regarding the nature of values in computer languages.
Types are a large subcategory of computer science, which are hard to summarize succinctly.
How a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.</description>
    </item>
    
    <item>
      <title>Method</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/method/</link>
      <pubDate>Tue, 22 Jun 2021 20:30:16 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/method/</guid>
      <description>A function that has been bound to a class instance. Example:
Calling a function:
myFunction() // function Calling a method:
class MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction() </description>
    </item>
    
    <item>
      <title>Class</title>
      <link>http://danssoftwareengineeringhandbook.com/glossary/class/</link>
      <pubDate>Sun, 20 Jun 2021 21:37:46 -0700</pubDate>
      
      <guid>http://danssoftwareengineeringhandbook.com/glossary/class/</guid>
      <description>Related to object-oriented programming. A class is a language construct that allows binding data to methods.</description>
    </item>
    
  </channel>
</rss>
