[{"id":0,"href":"/glossary/","title":"Glossary","parent":"Introduction to the Handbook","content":"The purpose of this document is to help to demystify the world of software engineering. Unfortunately, ours is a profession ripe with terms that are assumed to be understood. In reality, this system of knowledge is a patchwork. While flexible and sufficient for experienced practitioners, this system is obtuse to newcomers.\nOverall, it is the author\u0026rsquo;s opinion that this opaque nature of software engineering holds the field back \u0026ndash; indeed significantly \u0026ndash; in a number of important ways.\nWithout clarity, precision, and shared understanding of language, the field of software engineering is limited to those who can decipher the language and culture around it.\nA Note On Existing Resources    Volumes of books have been written on the topic of software engineering. So what makes this work different?\nFor one, this resource is open source. The author believes firmly in their responsibility to give back to the community that has benefited them so much.\nThis work aims to target the starting-to-intermediate software engineer, who does not necessarily have a computer science background. The language used is meant to be plain. The author hopes to communicate in a way that is understandable by the widest possible audience.\n"},{"id":1,"href":"/glossary/interface/","title":"Interface","parent":"Glossary","content":"An abstraction. Used when there are interchangeable classes that provide similar functionality to the calling code.\nLet\u0026rsquo;s start with a simple interface:\n1 2 3  interface Logger { fun writeBuffer(data: String) }   And use the example below:\n1 2 3 4 5  fun handleLoopUpdate(updates: List\u0026lt;Update\u0026gt;, logger: Logger) { updates.forEach { update -\u0026gt; logger.writeBuffer(update.summary) } }   With the two code samples above, the below hypothetical writers are possible:\n1  handleLoopUpdates(DebugPrintLogger())   1  handleLoopUpdates(LocalFileLogger())   1  handleLoopUpdates(RemoteServiceLogger())   1  handleLoopUpdates(OhShitLogger())   Note how handleLoopUpdates does not know or care what kind of logger it receives. The only thing handleLoopUpdates knows about is the Logger interface, and what the interface defines.\n"},{"id":2,"href":"/glossary/interpreted-language/","title":"Interpreted Language","parent":"Glossary","content":"Type of programming language. Contrast to a compiled language.\nInterpreted programming languages are programming languages where code is not compiled. Instead, an interpreter runs the code. The interpreter is a layer of software that runs in between the code written by a software developer and the machine running the code.\nBecause of this additional layer, interpreted languages tend to be slower than compiled ones, in terms of execution time and memory usage. However, the benefits include typically a more flexible type system and syntax.\n"},{"id":3,"href":"/tags/language-design/","title":"language design","parent":"Tags","content":""},{"id":4,"href":"/glossary/higher-order-function/","title":"Higher Order Function","parent":"Glossary","content":"A function that operates on functions, either by taking one as an argument or by returning one.\nReact hooks are examples of higher order functions:\n1 2 3 4 5 6 7 8 9  useEffect(() =\u0026gt; { const timeout = setTimeout(() =\u0026gt; alert(\u0026#39;Hello!\u0026#39;), 1000); return () =\u0026gt; { clearTimeout(timeout); }; }, []);   Other examples include map, reduce, and filter:\n1 2 3 4 5  collection.map((item) =\u0026gt; ... ); collection.reduce((item) =\u0026gt; ... ); collection.filter((item) =\u0026gt; ... );   "},{"id":5,"href":"/tags/computer-science/","title":"computer science","parent":"Tags","content":""},{"id":6,"href":"/glossary/recursion/","title":"Recursion","parent":"Glossary","content":"A function that calls itself, typically with a guard condition that prevents infinite execution.\nBelow is an example of a recursive function in javascript (a common factorial example):\n1 2 3 4 5 6 7 8 9 10  const factorial = (n) =\u0026gt; { if (n == 1) { return 1; } return n * factorial(n - 1); }; factorial(4); // == 24    "},{"id":7,"href":"/tags/data-science/","title":"data science","parent":"Tags","content":""},{"id":8,"href":"/glossary/machine-learning/","title":"Machine Learning (ML)","parent":"Glossary","content":"A class of algorithms and software tools that rely on various statistical and mathematical models, in addition to penalty, weighting, and layering mechanisms. One main goal of ML is to provide computers with the means to solve problems without requiring explicit code to be written to do so.\nThere are a large variety of ML algorithms, each with different benefits and drawbacks. Some common ways to measure ML algorithms are their: precision, accuracy, recall, and learning rate. Depending on the data and the problem at hand, data scientists will choose an algorithm and tweak it, often coming up with a number of iterations of an ML algorithm, before finalizing on one model.\n"},{"id":9,"href":"/tags/ML/","title":"ML","parent":"Tags","content":""},{"id":10,"href":"/tags/statistics/","title":"statistics","parent":"Tags","content":""},{"id":11,"href":"/glossary/database/","title":"Database","parent":"Glossary","content":"A program that specializes in efficient data storage and retrieval. There are a large variety of databases, which serve different purposes. Choosing the right database depends on many factors, such as types and formats of information being stored, whether or not the data is structured, and the overall relatability of data.\nSome of the most popular database types are:\n relational document graph  A key differentiator from a file system is that a database deals with structured, related, index-able data.\nRelational Databases    Examples of relational databases include:\n MySQL MariaDB Postgres SQL Server Access  Document Databases    Examples of document databases include:\n MongoDB DynamoDB Cassandra CouchDB  Graph Databases    Examples of graph databases include:\n Neo4j Neptune Cosmos DB  "},{"id":12,"href":"/tags/database/","title":"database","parent":"Tags","content":""},{"id":13,"href":"/glossary/smell/","title":"Smell","parent":"Glossary","content":"A smell is a term for an instinct that something is wrong. \u0026ldquo;Something\u0026rdquo; in this sense can refer to at least a few possibilities:\n code that is buggy, inconsistent, poorly designed, or error-prone a violation of expectations in a live system a misunderstanding of the model of code execution  Code smells are typically issues of quality, but this isn\u0026rsquo;t always the case.\n"},{"id":14,"href":"/tags/types/","title":"types","parent":"Tags","content":""},{"id":15,"href":"/glossary/weakly-typed/","title":"Weakly Typed","parent":"Glossary","content":"Method of type enforcement at a language level. Specifically, weakly typed languages have few or no restrictions when performing operations on values of different types.\nThis does not mean results of operations with mixed types are rational, expected, or reasonable. Often, this flexibility is actually the source of pernicious and difficult to debug issues.\nCompare to strongly typed languages.\n"},{"id":16,"href":"/glossary/strongly-typed/","title":"Strongly Typed","parent":"Glossary","content":"Method of type enforcement at a language level. Strongly typed languages have restrictions when performing operations on values of different types.\nComparisons and math operations specifically may result in exceptions when unexpected types are mixed.\nCompare to weakly typed languages.\n"},{"id":17,"href":"/glossary/function/","title":"Function","parent":"Glossary","content":"A series of instructions that are grouped and callable by a name. The primary components of a function are its:\n name parameter(s) return value  These three things together are called a function\u0026rsquo;s signature.\nExample    Below is an example Javascript function that adds two numbers:\n1 2 3  function addValues(a, b) { return a + b; }   Here is an example Kotlin function that finds the smallest value in a list:\n1 2 3 4 5 6 7 8 9  fun smallestValue(value: List\u0026lt;Int\u0026gt;): Int { var smallest = value.first() value.forEach { if (it \u0026lt; smallest) { smallest = it } } return smallest }   A Note on Go    Go, the programming language created by Google, permits multiple return values.\n"},{"id":18,"href":"/tags/language-construct/","title":"language construct","parent":"Tags","content":""},{"id":19,"href":"/tags/concept/","title":"concept","parent":"Tags","content":""},{"id":20,"href":"/tags/","title":"Tags","parent":"Introduction to the Handbook","content":""},{"id":21,"href":"/tags/developer-tools/","title":"developer tools","parent":"Tags","content":""},{"id":22,"href":"/tags/developer-workflow/","title":"developer workflow","parent":"Tags","content":""},{"id":23,"href":"/glossary/version-control-system/","title":"Version Control System (VCS)","parent":"Glossary","content":"Development tool. Used to track code changes. Modern and less-modern examples include:\n git mercurial subversion  "},{"id":24,"href":"/glossary/virtual-machine/","title":"Virtual Machine","parent":"Glossary","content":"A set of system components, providing an isolated OS environment (a \u0026ldquo;guest OS\u0026rdquo;) on top of the host OS environment.\n"},{"id":25,"href":"/tags/testing/","title":"testing","parent":"Tags","content":""},{"id":26,"href":"/glossary/unit-test/","title":"Unit Test","parent":"Glossary","content":"A test that exercises the smallest unit of publicly exposed code.\n\u0026ldquo;Smallest unit of publicly exposed code\u0026rdquo; depends on a few factors. For a library, this could be a public method in the library. For a REST API, the unit in question is (or at least should be) a REST call.\nWhy Not Lower Level Testing?    The reason why testing does not occur below this level (the \u0026ldquo;unit\u0026rdquo;), is because of subtle issues that cascade problems later on. When digging deeper into code for testing purposes, it becomes easy to start testing implementation, rather than the feature itself.\nWhen this happens, any subsequent change in implementation will require refactoring unit tests. This is a smell. The most well-written unit tests allow the implementation to change without breaking the test.\n"},{"id":27,"href":"/glossary/type/","title":"Type","parent":"Glossary","content":"Regarding the nature of values in computer languages.\nTypes are a large subcategory of computer science, which are hard to summarize succinctly.\nHow a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.\n"},{"id":28,"href":"/glossary/turing-complete/","title":"Turing Complete","parent":"Glossary","content":"Criteria for a logic system. Any logic system that includes the functionality for conditionals and loops is considered Turing complete. Most (but not all) programming languages are TC.\n"},{"id":29,"href":"/tags/software-development-methodology/","title":"software development methodology","parent":"Tags","content":""},{"id":30,"href":"/glossary/test-driven-development/","title":"Test Driven Development","parent":"Glossary","content":"Software development methodology. Outlines a series of practices during software development that aim to focus the process and improve overall quality of the code. Behaviors consist primarily of:\n Write a test before writing any code Observe the test fail Implement the minimum changes to allow the test to pass Observe the test passing Refactor to improve the existing code Repeat  "},{"id":31,"href":"/tags/software/","title":"software","parent":"Tags","content":""},{"id":32,"href":"/glossary/terminal/","title":"Terminal","parent":"Glossary","content":"Software. A program, allows interacting with a computer via the command line interface (CLI).\n"},{"id":33,"href":"/glossary/stream/","title":"Stream","parent":"Glossary","content":"A flow of data from a source to one or more destinations.\n"},{"id":34,"href":"/tags/design-pattern/","title":"design pattern","parent":"Tags","content":""},{"id":35,"href":"/glossary/strategy-design-pattern/","title":"Strategy Design Pattern","parent":"Glossary","content":"Instead of implementing a single algorithm directly, a strategy design pattern allows for multiple algorithms. The strategy pattern then selects the appropriate algorithm at runtime.\n"},{"id":36,"href":"/tags/acronym/","title":"acronym","parent":"Tags","content":""},{"id":37,"href":"/tags/SOLID/","title":"SOLID","parent":"Tags","content":""},{"id":38,"href":"/glossary/solid/","title":"SOLID","parent":"Glossary","content":"Programming design principles. Acronym:\n Single Responsibility Principle Open/Closed Principle Liskov Substitution Principle Interface Segregation Principle Dependency Inversion  "},{"id":39,"href":"/glossary/singleton-design-pattern/","title":"Singleton Design Pattern","parent":"Glossary","content":"Software component that allows for creating a single instance of an object. Subsequent requests return the same object.\n"},{"id":40,"href":"/tags/design-principle/","title":"design principle","parent":"Tags","content":""},{"id":41,"href":"/glossary/single-responsibility-principle/","title":"Single Responsibility Principle","parent":"Glossary","content":"A logical section of code (function, class, module), should only ever have one reason to change.\n"},{"id":42,"href":"/glossary/sanity-check/","title":"Sanity Check","parent":"Glossary","content":"Concept. Perform a check on a system. The result should immediately and unambiguously show whether the system is operating under rational expectations. A negative result would indicate the system under test is experiencing logic bugs, which make the system unusable.\n"},{"id":43,"href":"/glossary/regression/","title":"Regression","parent":"Glossary","content":"A code change that breaks a previously working feature.\n"},{"id":44,"href":"/glossary/open-source/","title":"Open Source","parent":"Glossary","content":"Software licensing scheme. While each license has its own terms, the primary defining characteristic of open source licensing is that the software is free to use and inspect. Many license types exist. Well known examples include GPL, MIT, BSD.\n"},{"id":45,"href":"/glossary/open-closed-principle/","title":"Open/Closed Principle","parent":"Glossary","content":"The concept states that classes should be open for extension but closed for modification.\n"},{"id":46,"href":"/glossary/observer-design-pattern/","title":"Observer Design Pattern","parent":"Glossary","content":"Attempts to remove a hard coupling between software components. Instead of calling a function directly, which creates a hard coupling between the calling function and the callee, the pattern calls for a mediator to dispatch updates between components. Using the mediator, the calling function and the callee can avoid knowing anything about each other.\n"},{"id":47,"href":"/glossary/multiton-design-pattern/","title":"Multiton Design Pattern","parent":"Glossary","content":"A class, module, or function that is used to handle creating or returning objects. Multitons can take parameters, and invocation is idempotent.\nExample:\nmultiton = (a) =\u0026gt; { if (a == 1) { return Class1() } if (a == 2) { return Class2() } return Class3() } multiton(1) // Class1 multiton(2) // Class2 multiton(3) // Class3 "},{"id":48,"href":"/glossary/method/","title":"Method","parent":"Glossary","content":"A function that has been bound to a class instance. Example:\nCalling a function:\nmyFunction() // function Calling a method:\nclass MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction() "},{"id":49,"href":"/tags/oop/","title":"oop","parent":"Tags","content":""},{"id":50,"href":"/glossary/liskov-substitution-principle/","title":"Liskov Substitution Principle","parent":"Glossary","content":"SOLID design principle. Relating to types. States essentially that if X is a subtype of Y, then X may be used in substitution of Y without concern for correctness or task performed.\n"},{"id":51,"href":"/glossary/library/","title":"Library","parent":"Glossary","content":"Code that is packaged and maintained externally to the code under development. Similar to dependency.\n"},{"id":52,"href":"/glossary/interface-segregation-principle/","title":"Interface Segregation Principle","parent":"Glossary","content":"States that interfaces should remain small and focused. Interface implementations are then lightweight, and easy to create and maintain. Code that depends on interfaces that are small and focused in turn keep a smaller scope of responsibility.\n"},{"id":53,"href":"/glossary/integration-test/","title":"Integration Test","parent":"Glossary","content":"Test that encompasses more components than a unit test.\nThere is no hard definition for what makes a unit test versus an integration test. However, one of the primary goals of an integration test is to test how the different components or services interact with each other.\n"},{"id":54,"href":"/tags/automation/","title":"automation","parent":"Tags","content":""},{"id":55,"href":"/glossary/infrastructure-as-code/","title":"Infrastructure as Code (IaC)","parent":"Glossary","content":"The idea is that all infrastructure (web servers, databases, ingresses, message queues, etc) for a given environment are scripted. Setup and teardown is automated and repeatable. Some examples of software used to automate infrastructure are: Terraform, Ansible, Salt to name just a few.\n"},{"id":56,"href":"/glossary/ide/","title":"IDE","parent":"Glossary","content":"Acronym: integrated development environment.\nA software program, used by programmers. Includes a combination of tools such as a text editor and language compiler (hence \u0026ldquo;integrated\u0026rdquo;). Often highly extensible and customizable.\nExamples of IDEs include:\n JetBrains IDEs Microsoft Visual Studio Eclipse  "},{"id":57,"href":"/glossary/functional-programming/","title":"Functional Programming","parent":"Glossary","content":"Programs are designed using a composition of functions, which operate on data.\n"},{"id":58,"href":"/tags/programming-paradigm/","title":"programming paradigm","parent":"Tags","content":""},{"id":59,"href":"/glossary/factory-design-pattern/","title":"Factory Design Pattern","parent":"Glossary","content":"A function or class, whose primary responsibility is creating instances of another class.\n"},{"id":60,"href":"/glossary/facade-design-pattern/","title":"Facade Design Pattern","parent":"Glossary","content":"An interface or class used to hide a system\u0026rsquo;s underlying complexity.\n"},{"id":61,"href":"/glossary/dynamic-language/","title":"Dynamic Language","parent":"Glossary","content":"Feature of a programming language. Operations that are typically compile-time operations are available at run-time. Not a binary description, but rather a spectrum, where some dynamic features may be supported but not others.\n"},{"id":62,"href":"/glossary/devops/","title":"DevOps","parent":"Glossary","content":"Traditionally, \u0026ldquo;development\u0026rdquo; and \u0026ldquo;operations\u0026rdquo; have had largely separate responsibilities in technology organizations. However, the trend of DevOps is to combine these professions.\nOne flaw identified by the separation of these responsibilities is that barriers tend to rise, slowing all efforts. The benefit from combining these job responsibilities is that they are essentially two sides to the same issue, and in that sense, the separation was a bad idea in the first place.\nAs an outcome of this holistic view, DevOps promotes autonomy, ownership, understanding, and automation. Infrastructure-as-code (IaC) is another big concept related to DevOps.\n"},{"id":63,"href":"/glossary/design-pattern/","title":"Design Pattern","parent":"Glossary","content":"A method of identifying reoccurring problems and applying commonly-agreed upon solutions.\n"},{"id":64,"href":"/glossary/dependency-inversion/","title":"Dependency Inversion","parent":"Glossary","content":"Classes should be provided their dependencies. Below is a trivial example of dependency inversion, using Kotlin:\n1 2 3 4 5  class EmailService(private val emailClient: EmailClient) { fun sendEmail() { emailClient.send() } }   This is compared to a system where class methods call external or global dependencies directly:\n1 2 3 4 5  class EmailService { fun sendEmail() { EmailClient().send() } }   There are a few benefits to dependency inversion. One primary benefit is that the class at hand is easier to test, because its dependencies can be mocked. Another benefit is that the calling code can substitute an EmailClient which is configured differently than the hard coded example. Finally, in terms of design, EmailService has fewer responsibilities using dependency inversion, which is always desirable.\n"},{"id":65,"href":"/glossary/dependency/","title":"Dependency","parent":"Glossary","content":"A function, class, library, module, api, or other logical section of code, which is external to the code under active development. Typically, but not always, this code is vendored, versioned, packaged, and read-only.\n"},{"id":66,"href":"/glossary/continuous-delivery/","title":"Continuous Delivery","parent":"Glossary","content":"The essential feature of continuous delivery is that every commit that passes its integration step, automatically gets deployed further to a target environment.\nTypically, a target environment is a test or integration environment, before final deployment out to production.\n"},{"id":67,"href":"/glossary/continuous-integration/","title":"Continuous Integration","parent":"Glossary","content":"A suite of tests run against all commits that are pushed to version control automatically. The primary benefit here is in using tests to catch regressions as early as possible.\n"},{"id":68,"href":"/glossary/container/","title":"Container","parent":"Glossary","content":"A lightweight runtime environment. Encapsulates dependencies from host environment.\n"},{"id":69,"href":"/glossary/compiled-language/","title":"Compiled Language","parent":"Glossary","content":"Type of programming language. Contrast to a dynamic language.\nCompiled languages are identified by the fact that the target for code is a compiler and not an interpreter. What this means, practically, is that at runtime, the program runs as compiled machine code. There is no interpreter layer.\n"},{"id":70,"href":"/glossary/ci-cd/","title":"CI/CD","parent":"Glossary","content":"A developer workflow whereby code changes go through an automated process after check in.\nThe first step of the process is integration. Automated tests run, as well as any configured analysis tools.\nThe second step is delivery. In this case, delivery means automatic deployment of code changes to the next target environment once the integration step completes. Typically, there is more than one target environment, so this process can loop a few times as verification checks happen in each environment. The final step is when code is deployed out to production.\nOne thing to note about the delivery step. After deployment to a target environment, it is common to perform some manual testing checks. As such, the delivery phase often is not fully automated. Instead, a deployment happens to a target environment and once deployment finishes, the developer triggers deployment to production or another test environment.\n"},{"id":71,"href":"/glossary/cloud/","title":"Cloud","parent":"Glossary","content":"  Someone else\u0026rsquo;s computer.\n  Platform. Virtualized services, used to build products and services on top of.\n  "},{"id":72,"href":"/glossary/class/","title":"Class","parent":"Glossary","content":"Related to object-oriented programming. A class is a language construct that allows binding data to methods.\nExample    Below is an example class for a game, written in Kotlin. In this example, QuestService handles responsibilities related to questing. The class initializes with a list of possible quests. Most methods scope to a PlayerMob, meaning those particular methods concern only a single player\u0026rsquo;s quests.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  class QuestService(private val quests: List\u0026lt;Quest\u0026gt;) { fun findByType(type: QuestType): Quest? { return quests.find { it.type == type } } fun getAcceptableQuestsForMob(mob: PlayerMob): List\u0026lt;Quest\u0026gt; { return quests.filter { val notSatisfied = it.acceptConditions.find { req -\u0026gt; !req.doesSatisfy(mob) } !mob.quests.containsKey(it.type) \u0026amp;\u0026amp; notSatisfied == null } } fun getAcceptedQuestsForMob(mob: PlayerMob): List\u0026lt;Quest\u0026gt; { return quests.filter { mob.quests.containsKey(it.type) \u0026amp;\u0026amp; mob.quests[it.type]?.status != QuestStatus.SUBMITTED } } fun getSubmittableQuestsForMob(mob: PlayerMob): List\u0026lt;Quest\u0026gt; { return quests.filter { val notSatisfied = it.submitConditions.find { req -\u0026gt; !req.doesSatisfy(mob) } mob.quests.containsKey(it.type) \u0026amp;\u0026amp; notSatisfied == null } } fun submit(mob: PlayerMob, quest: Quest) { mob.quests[quest.type]?.let { it.status = QuestStatus.SUBMITTED } reward(mob, quest) } fun accept(mob: PlayerMob, quest: Quest) { mob.quests[quest.type] = QuestModel() } fun abandon(mob: PlayerMob, quest: Quest) { mob.quests.remove(quest.type) } fun reward(mob: PlayerMob, quest: Quest) { quest.rewards.forEach { RewardService(mob).award(it) } } fun getLog(mob: PlayerMob): List\u0026lt;Quest\u0026gt; { return quests.filter { mob.quests[it.type] !== null }.sortedBy { it.level } } }   When considering the definition at the top of the page, the quests passed in to QuestService on line 1 are the data being bound to the class, and each method either operates on the bound data or on an argument passed in to it.\n"},{"id":73,"href":"/glossary/builder-design-pattern/","title":"Builder Design Pattern","parent":"Glossary","content":" Definition. A class, module, or other language construct for specifying how to configure and build an object before the actual object instantiation.  "},{"id":74,"href":"/glossary/bug/","title":"Bug","parent":"Glossary","content":"Loosely defined as a problem in code, which could be any of the following:\n A logic flaw A syntax or runtime error A memory leak A race condition A previously overlooked flaw  "},{"id":75,"href":"/glossary/big-o-notation/","title":"Big O Notation","parent":"Glossary","content":"A mathematical notation, Big O is used to classify algorithmic performance in space or time requirements. Big O is used to measure the upper bound of growth, ie, worst case scenario.\n"},{"id":76,"href":"/glossary/api/","title":"API","parent":"Glossary","content":"  Acronym. Application programming interface.\n  Concept. Something that provides functionality, which can be programmed against.\n  A library, module, or service that can be integrated into code.\n  "},{"id":77,"href":"/glossary/algorithm/","title":"Algorithm","parent":"Glossary","content":"A reusable set of computer instructions in the form of code.\n"},{"id":78,"href":"/glossary/adapter-design-pattern/","title":"Adapter Design Pattern","parent":"Glossary","content":"Attempts to solve questions like, \u0026ldquo;how do we get incompatible interfaces to work together?\u0026rdquo; To solve this problem, a layer is introduced between the interfaces (\u0026ldquo;the adapter\u0026rdquo;), which mediates incompatibilities.\n"},{"id":79,"href":"/glossary/abstraction/","title":"Abstraction","parent":"Glossary","content":"The idea behind, or purpose of, a software component. Contrast the two example sentences below:\nExample 1 (abstraction):\n This writer abstraction is flexible and backend-agnostic.\n Example 2 (implementation):\n This file system writer implementation is flexible, but backend-specific.\n The first example does not mention what kind of writer the speaker is referencing. The second example, by contrast, references a specific implementation (the filesystem writer).\n"},{"id":80,"href":"/","title":"Introduction to the Handbook","parent":"","content":"Software engineering has never been an easy profession.\nKnowledge is assumed. Misunderstandings flourish.\nAn opaque profession does not do itself any favors. This handbook is a modest attempt by the author to lay out an open source glossary of terms, for the benefit of practitioners everywhere.\nTarget Audience    It is the author\u0026rsquo;s hope that new software engineers, web developers, programmers, hackers, and any other curious soul finds these documents useful.\nBecause of this wide target audience, language is kept simple where possible. Complex language creates barriers, and prevents growth. Simplicity promotes understanding.\nFeedback    Please use the following communication channels to send feedback:\n Email Github Issues On an individual glossary page, use the feedback link that appears in the footer  "},{"id":81,"href":"/categories/","title":"Categories","parent":"Introduction to the Handbook","content":""}]