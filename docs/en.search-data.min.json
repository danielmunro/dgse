[{"id":0,"href":"/glossary/","title":"Glossary","parent":"Home","content":"The purpose of this document is to help to demystify the world of software engineering. Unfortunately, ours is a profession ripe with terms that are assumed to be understood. In reality, this system of knowledge is a patchwork. While flexible and sufficient for experienced practitioners, this system is obtuse to newcomers.\nOverall, it is the author\u0026rsquo;s opinion that this opaque nature of software engineering holds the field back \u0026ndash; indeed significantly \u0026ndash; in a number of important ways.\nWithout clarity, precision, and shared understanding of language, the field of software engineering is limited to those who can decipher the language and culture around it.\nA Note On Existing Resources    Volumes of books have been written on the topic of software engineering. So what makes this work different?\nFor one, this resource is open source. The author believes firmly in their responsibility to give back to the community that has benefited them so much.\nThis work aims to target the starting-to-intermediate software engineer, who does not necessarily have a computer science background. The language used is meant to be plain. The author hopes to communicate in a way that is understandable by the widest possible audience.\n"},{"id":1,"href":"/glossary/machine-learning/","title":"Machine Learning","parent":"Glossary","content":"A class of algorithms and software tools that rely on various statistical and mathematical models, in addition to learning, penalty, and weighting mechanisms.\n"},{"id":2,"href":"/glossary/database/","title":"Database","parent":"Glossary","content":"A program that specializes in efficient data storage and retrieval. There are a large variety of databases, which serve different purposes. Choosing the right database depends on many factors, such as types and formats of information being stored, whether or not the data is structured, and the overall relatability of data.\nSome of the most popular database types are:\n relational document graph  A key differentiator from a file system is that a database deals with structured, related, index-able data.\nRelational Databases    Examples of relational databases include:\n MySQL MariaDB Postgres SQL Server Access  Document Databases    Examples of document databases include:\n MongoDB DynamoDB Cassandra CouchDB  Graph Databases    Examples of graph databases include:\n Neo4j Neptune Cosmos DB  "},{"id":3,"href":"/tags/database/","title":"database","parent":"Tags","content":""},{"id":4,"href":"/tags/types/","title":"types","parent":"Tags","content":""},{"id":5,"href":"/glossary/weakly-typed/","title":"Weakly Typed","parent":"Glossary","content":"Method of type enforcement at a language level. Specifically, weakly typed languages have few or no restrictions when performing operations on values of different types.\nThis does not mean results of operations with mixed types are rational, expected, or reasonable. Often, this flexibility is actually the source of pernicious and difficult to debug issues.\nCompare to strongly typed languages.\n"},{"id":6,"href":"/glossary/strongly-typed/","title":"Strongly Typed","parent":"Glossary","content":"Method of type enforcement at a language level. Strongly typed languages have restrictions when performing operations on values of different types.\nComparisons and math operations specifically may result in exceptions when unexpected types are mixed.\nCompare to weakly typed languages.\n"},{"id":7,"href":"/glossary/function/","title":"Function","parent":"Glossary","content":"A series of instructions that are grouped and callable by a name. The primary components of a function are its:\n name parameter(s) return value  These three things together are called a function\u0026rsquo;s signature.\nExample    Below is an example Javascript function that adds two numbers:\n1 2 3  function addValues(a, b) { return a + b; }   Here is an example Kotlin function that finds the smallest value in a list:\n1 2 3 4 5 6 7 8 9  fun smallestValue(value: List\u0026lt;Int\u0026gt;): Int { var smallest = value.first() value.forEach { if (it \u0026lt; smallest) { smallest = it } } return smallest }   A Note on Go    Go, the programming language created by Google, permits multiple return values.\n"},{"id":8,"href":"/tags/language-construct/","title":"language construct","parent":"Tags","content":""},{"id":9,"href":"/tags/concept/","title":"concept","parent":"Tags","content":""},{"id":10,"href":"/tags/","title":"Tags","parent":"Home","content":""},{"id":11,"href":"/tags/developer-tools/","title":"developer tools","parent":"Tags","content":""},{"id":12,"href":"/tags/developer-workflow/","title":"developer workflow","parent":"Tags","content":""},{"id":13,"href":"/glossary/version-control-system/","title":"Version Control System (VCS)","parent":"Glossary","content":"Development tool. Used to track code changes. Modern and less-modern examples include:\n git mercurial subversion  "},{"id":14,"href":"/glossary/virtual-machine/","title":"Virtual Machine","parent":"Glossary","content":"A set of system components, providing an isolated OS environment (a \u0026ldquo;guest OS\u0026rdquo;) on top of the host OS environment.\n"},{"id":15,"href":"/tags/testing/","title":"testing","parent":"Tags","content":""},{"id":16,"href":"/glossary/unit-test/","title":"Unit Test","parent":"Glossary","content":"A test that exercises the smallest unit of publicly exposed code.\n\u0026ldquo;Smallest unit of publicly exposed code\u0026rdquo; depends on a few factors. For a library, this could be a public method in the library. For a REST API, the unit in question is (or at least should be) a REST call.\nWhy Not Lower Level Testing?    The reason why testing does not occur below this level (the \u0026ldquo;unit\u0026rdquo;), is because of subtle issues that cascade problems later on. When digging deeper into code for testing purposes, it becomes easy to start testing implementation, rather than the feature itself.\nWhen this happens, any subsequent change in implementation will require refactoring unit tests. This is a smell. The most well-written unit tests allow the implementation to change without breaking the test.\n"},{"id":17,"href":"/tags/computer-science/","title":"computer science","parent":"Tags","content":""},{"id":18,"href":"/glossary/type/","title":"Type","parent":"Glossary","content":"Regarding the nature of values in computer languages.\nTypes are a large subcategory of computer science, which are hard to summarize succinctly.\nHow a language implements types has a broad impact on the way the language works, the underlying complexity, the feature availability.\n"},{"id":19,"href":"/glossary/turing-complete/","title":"Turing Complete","parent":"Glossary","content":"Criteria for a logic system. Any logic system that includes the functionality for conditionals and loops is considered Turing complete. Most (but not all) programming languages are TC.\n"},{"id":20,"href":"/tags/software-development-methodology/","title":"software development methodology","parent":"Tags","content":""},{"id":21,"href":"/glossary/test-driven-development/","title":"Test Driven Development","parent":"Glossary","content":"Software development methodology. Outlines a series of practices during software development that aim to focus the process and improve overall quality of the code. Behaviors consist primarily of:\n Write a test before writing any code Observe the test fail Implement the minimum changes to allow the test to pass Observe the test passing Refactor to improve the existing code Repeat  "},{"id":22,"href":"/tags/software/","title":"software","parent":"Tags","content":""},{"id":23,"href":"/glossary/terminal/","title":"Terminal","parent":"Glossary","content":"Software. A program, allows interacting with a computer via the command line interface (CLI).\n"},{"id":24,"href":"/glossary/stream/","title":"Stream","parent":"Glossary","content":"A flow of data from a source to one or more destinations.\n"},{"id":25,"href":"/tags/design-pattern/","title":"design pattern","parent":"Tags","content":""},{"id":26,"href":"/glossary/strategy-design-pattern/","title":"Strategy Design Pattern","parent":"Glossary","content":"Instead of implementing a single algorithm directly, a strategy design pattern allows for multiple algorithms. The strategy pattern then selects the appropriate algorithm at runtime.\n"},{"id":27,"href":"/tags/acronym/","title":"acronym","parent":"Tags","content":""},{"id":28,"href":"/tags/SOLID/","title":"SOLID","parent":"Tags","content":""},{"id":29,"href":"/glossary/solid/","title":"SOLID","parent":"Glossary","content":" Programming design principles. Acronym. Stands for:   Single Responsibility Principle [entry] Open/Closed Principle [entry] Liskov Substitution Principle [entry] Interface Segregation Principle [entry] Dependency Inversion [entry]  "},{"id":30,"href":"/glossary/singleton-design-pattern/","title":"Singleton Design Pattern","parent":"Glossary","content":"Software component that allows for creating a single instance of an object. Subsequent requests return the same object.\n"},{"id":31,"href":"/tags/design-principle/","title":"design principle","parent":"Tags","content":""},{"id":32,"href":"/glossary/single-responsibility-principle/","title":"Single Responsibility Principle","parent":"Glossary","content":"A logical section of code (function, class, module), should only ever have one reason to change.\n"},{"id":33,"href":"/glossary/sanity-check/","title":"Sanity Check","parent":"Glossary","content":"Concept. Perform a check on a system. The result should immediately and unambiguously show whether the system is operating under rational expectations. A negative result would indicate the system under test is experiencing logic bugs, which make the system unusable.\n"},{"id":34,"href":"/glossary/regression/","title":"Regression","parent":"Glossary","content":"A code change that breaks a previously working feature.\n"},{"id":35,"href":"/glossary/open-source/","title":"Open Source","parent":"Glossary","content":"Software licensing scheme. While each license has its own terms, the primary defining characteristic of open source licensing is that the software is free to use and inspect. Many license types exist. Well known examples include GPL, MIT, BSD.\n"},{"id":36,"href":"/glossary/open-closed-principle/","title":"Open/Closed Principle","parent":"Glossary","content":"The concept states that classes should be open for extension but closed for modification.\n"},{"id":37,"href":"/glossary/observer-design-pattern/","title":"Observer Design Pattern","parent":"Glossary","content":"Attempts to remove a hard coupling between software components. Instead of calling a function directly, which creates a hard coupling between the calling function and the callee, the pattern calls for a mediator to dispatch updates between components. Using the mediator, the calling function and the callee can avoid knowing anything about each other.\n"},{"id":38,"href":"/glossary/multiton-design-pattern/","title":"Multiton Design Pattern","parent":"Glossary","content":"A class, module, or function that is used to handle creating or returning objects. Multitons can take parameters, and invocation is idempotent.\nExample:\nmultiton = (a) =\u0026gt; { if (a == 1) { return Class1() } if (a == 2) { return Class2() } return Class3() } multiton(1) // Class1 multiton(2) // Class2 multiton(3) // Class3 "},{"id":39,"href":"/glossary/method/","title":"Method","parent":"Glossary","content":"A function that has been bound to a class instance. Example:\nCalling a function:\nmyFunction() // function Calling a method:\nclass MyClass { fun myFunction() {} } instance = new MyClass() instance.myFunction() "},{"id":40,"href":"/glossary/liskov-substitution-principle/","title":"Liskov Substitution Principle","parent":"Glossary","content":"SOLID design principle. Relating to types. States essentially that if X is a subtype of Y, then X may be used in substitution of Y without concern for correctness or task performed.\n"},{"id":41,"href":"/glossary/library/","title":"Library","parent":"Glossary","content":"  Concept. Someone else\u0026rsquo;s code.\n  Code that is packaged and maintained externally to the code under development.\n  "},{"id":42,"href":"/glossary/interface-segregation-principle/","title":"Interface Segregation Principle","parent":"Glossary","content":"States that interfaces should remain small and focused. Interface implementations are then lightweight, and easy to create and maintain. Code that depends on interfaces that are small and focused in turn keep a smaller scope of responsibility.\n"},{"id":43,"href":"/glossary/integration-test/","title":"Integration Test","parent":"Glossary","content":"Test that encompasses more components than a unit test.\nThere is no hard definition for what makes a unit test versus an integration test. However, one of the primary goals of an integration test is to test how the different components or services interact with each other.\n"},{"id":44,"href":"/tags/automation/","title":"automation","parent":"Tags","content":""},{"id":45,"href":"/glossary/infrastructure-as-code/","title":"Infrastructure as Code (IaC)","parent":"Glossary","content":"The idea is that all infrastructure (web servers, databases, ingresses, message queues, etc) for a given environment are scripted. Setup and teardown is automated and repeatable. Some examples of software used to automate infrastructure are: Terraform, Ansible, Salt to name just a few.\n"},{"id":46,"href":"/glossary/ide/","title":"IDE","parent":"Glossary","content":"Acronym: integrated development environment.\nA software program, used by programmers. Includes a combination of tools such as a text editor and language compiler (hence \u0026ldquo;integrated\u0026rdquo;). Often highly extensible and customizable.\nExamples of IDEs include:\n JetBrains IDEs Microsoft Visual Studio Eclipse  "},{"id":47,"href":"/glossary/functional-programming/","title":"Functional Programming","parent":"Glossary","content":"Programs are designed using a composition of functions, which operate on data.\n"},{"id":48,"href":"/tags/programming-paradigm/","title":"programming paradigm","parent":"Tags","content":""},{"id":49,"href":"/glossary/factory-design-pattern/","title":"Factory Design Pattern","parent":"Glossary","content":"A function or class, whose primary responsibility is creating instances of another class.\n"},{"id":50,"href":"/glossary/facade-design-pattern/","title":"Facade Design Pattern","parent":"Glossary","content":"An interface or class used to hide a system\u0026rsquo;s underlying complexity.\n"},{"id":51,"href":"/glossary/dynamic-language/","title":"Dynamic Language","parent":"Glossary","content":" Type of programming language. Contrast to a compiled language. Dynamic languages are identified by the fact that the code instructions are interpreted at runtime. The interpreter is a layer of software that runs in between a machine and the code instructions. Because of this additional layer, dynamic languages tend to be slower than compiled ones.  "},{"id":52,"href":"/glossary/devops/","title":"DevOps","parent":"Glossary","content":"Traditionally, \u0026ldquo;development\u0026rdquo; and \u0026ldquo;operations\u0026rdquo; have had largely separate responsibilities in technology organizations. However, the trend of DevOps is to combine these professions.\nOne flaw identified by the separation of these responsibilities is that barriers tend to rise, slowing all efforts. The benefit from combining these job responsibilities is that they are essentially two sides to the same issue, and in that sense, the separation was a bad idea in the first place.\nAs an outcome of this holistic view, DevOps promotes autonomy, ownership, understanding, and automation. Infrastructure-as-code (IaC) is another big concept related to DevOps.\n"},{"id":53,"href":"/glossary/design-pattern/","title":"Design Pattern","parent":"Glossary","content":"  A commonly-agreed upon solution to problem that has arisen before.\n  Classifying code design challenges in ways that existing ideas can be implemented in order to solve.\n  "},{"id":54,"href":"/glossary/dependency-inversion/","title":"Dependency Inversion","parent":"Glossary","content":" SOLID design principle. States that classes should be provided dependencies. This is compared to a system where class methods call external or global dependencies directly.  "},{"id":55,"href":"/glossary/dependency/","title":"Dependency","parent":"Glossary","content":"  Concept. A function, class, library, module, or other logical section of code, which is external to the code under active development.\n  Concept. A service or third party API, which your code depends on to work correctly.\n  "},{"id":56,"href":"/glossary/continuous-delivery/","title":"Continuous Delivery","parent":"Glossary","content":"  Concept. Developer workflow automation. The essential feature of continuous delivery is that every commit that passes its integration step, automatically gets deployed further to a target environment.\nTypically, a target environment is a test or integration environment, before final deployment out to production.\n  "},{"id":57,"href":"/glossary/continuous-integration/","title":"Continuous Integration","parent":"Glossary","content":"Concept. Developer workflow, involves running a suite of tests against all commits that are pushed to version control. The primary benefit here is in using tests to catch regressions as early as possible.\n"},{"id":58,"href":"/glossary/container/","title":"Container","parent":"Glossary","content":"  Definition. A lightweight runtime environment. Encapsulates dependencies from host environment.\n  Definition. A filesystem and a process.\n  Article. Containers 101.\n  "},{"id":59,"href":"/glossary/compiled-language/","title":"Compiled Language","parent":"Glossary","content":"Type of programming language. Contrast to a dynamic language. Compiled languages are identified by the fact that the target for code instructions is a compiler and not an interpreter.\nThe primary difference between a compiler and an interpreter is that a compiler produces machine-readable code directly.\n"},{"id":60,"href":"/glossary/ci-cd/","title":"CI/CD","parent":"Glossary","content":"  Acronym. Continuous integration / continuous delivery.\n  Concept. Defines a developer workflow whereby code changes go through an automated process after check in.\nThe first step of the process is integration. Automated tests run, as well as any configured analysis tools.\nThe second step is delivery. In this case, delivery means automatic deployment of code changes to the next target environment once the integration step completes. Typically, there is more than one target environment, so this process can loop a few times as verification checks happen in each environment. The final step is when code is deployed out to production.\nOne thing to note about the delivery step. After deployment to a target environment, it is common to perform some manual testing checks. As such, the delivery phase often is not fully automated. Instead, a deployment happens to a target environment and once deployment finishes, the developer triggers deployment to production or another test environment.\n  "},{"id":61,"href":"/glossary/cloud/","title":"Cloud","parent":"Glossary","content":"  Someone else\u0026rsquo;s computer.\n  Platform. Virtualized services, used to build products and services on top of.\n  "},{"id":62,"href":"/glossary/object-oriented-programming/","title":"Object Oriented Programming","parent":"Glossary","content":"Language-level support for binding data to methods.\n"},{"id":63,"href":"/glossary/class/","title":"Class","parent":"Glossary","content":"Related to object-oriented programming. A class is a language construct that allows binding data to methods.\n"},{"id":64,"href":"/glossary/builder-design-pattern/","title":"Builder Design Pattern","parent":"Glossary","content":" Definition. A class, module, or other language construct for specifying how to configure and build an object before the actual object instantiation.  "},{"id":65,"href":"/glossary/bug/","title":"Bug","parent":"Glossary","content":"Loosely defined as a problem in code, which could be any of the following:\n A logic flaw A syntax or runtime error A memory leak A race condition A previously overlooked flaw  "},{"id":66,"href":"/glossary/big-o-notation/","title":"Big O Notation","parent":"Glossary","content":"  Definition. A mathematical notation, Big O is used to classify algorithmic performance in space or time requirements. Big O is used to measure the upper bound of growth, ie, worst case scenario.\n  Reference. Wikipedia.\n  "},{"id":67,"href":"/glossary/api/","title":"API","parent":"Glossary","content":"  Acronym. Application programming interface.\n  Concept. Something that provides functionality, which can be programmed against.\n  A library, module, or service that can be integrated into code.\n  "},{"id":68,"href":"/glossary/algorithm/","title":"Algorithm","parent":"Glossary","content":"A reusable set of computer instructions in the form of code.\n"},{"id":69,"href":"/glossary/adapter-design-pattern/","title":"Adapter Design Pattern","parent":"Glossary","content":"Attempts to solve questions like, \u0026ldquo;how do we get incompatible interfaces to work together?\u0026rdquo; To solve this problem, a layer is introduced between the interfaces (\u0026ldquo;the adapter\u0026rdquo;), which mediates incompatibilities.\n"},{"id":70,"href":"/glossary/abstraction/","title":"Abstraction","parent":"Glossary","content":"The idea behind, or purpose of, a software component. Contrast the two example sentences below:\nExample 1 (abstraction):\n This writer abstraction is flexible and backend-agnostic.\n Example 2 (implementation):\n This file system writer implementation is flexible, but backend-specific.\n The first example does not mention what kind of writer the speaker is referencing. The second example, by contrast, references a specific implementation (the filesystem writer).\n"},{"id":71,"href":"/","title":"Home","parent":"","content":"Software engineering has never been an easy profession.\nKnowledge is assumed. Misunderstandings flourish.\nAn opaque profession does not do itself any favors. This handbook is a modest attempt by the author to lay out an open source glossary of terms, for the benefit of practitioners everywhere.\n"},{"id":72,"href":"/categories/","title":"Categories","parent":"Home","content":""}]